# =============================================================================
# EDG MICROSERVICES - DOCKER COMPOSE CONFIGURATION
# =============================================================================

networks:
  # Rete interna per comunicazione tra microservizi
  # Nota: internal: true rimosso per permettere accesso DBeaver in sviluppo
  internal:
    driver: bridge

  # Rete esterna per gateway (accesso pubblico)
  external:
    driver: bridge

services:
  # ===========================================================================
  # DATABASE (MySQL)
  # ===========================================================================
  mysql:
    image: mysql:8.0
    container_name: auth-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - internal
    ports:
      - '3306:3306'
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10

  # ===========================================================================
  # 3. DATABASE LOGGER (MongoDB)
  # ===========================================================================
  logger-mongo:
    image: mongo:7.0
    container_name: log-mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_LOG_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_LOG_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_LOG_DATABASE}
    volumes:
      - mongo_data:/data/db
    networks:
      - internal
    ports:
      - '27017:27017'
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 50

  # ===========================================================================
  # AUTH SERVICE (Microservizio Autenticazione)
  # ===========================================================================
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      # Mode Configuration
      NODE_ENV: production
      GATEWAY_MODE: 'true' # ✅ Gateway mode in production

      # Gateway Secret (DEVE essere uguale nel gateway!)
      GATEWAY_SECRET: ${GATEWAY_SECRET}

      # Database
      DB_NAME: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_HOST: mysql # ✅ Nome del servizio Docker
      DB_PORT: 3306
      DB_SYNC: 'false' # No sync in production

      # JWT (DEVE essere uguale nel gateway!)
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRY: 15m
      JWT_REFRESH_EXPIRY: 7d

      # Service
      SERVICE_NAME: EDG Auth Service
      PORT: 3001

      # Rate Limiting Specifico (business logic)
      LOGIN_RATE_LIMIT_WINDOW: 15
      LOGIN_RATE_LIMIT_MAX_ATTEMPTS: 5
      RESET_PASSWORD_RATE_LIMIT_WINDOW: 60
      RESET_PASSWORD_RATE_LIMIT_MAX_ATTEMPTS: 3
      REGISTER_RATE_LIMIT_WINDOW: 60
      REGISTER_RATE_LIMIT_MAX_ATTEMPTS: 10

      # Logging
      LOG_LEVEL: info
    expose:
      - '3001' # ✅ Solo rete interna (NO accesso esterno diretto)
    networks:
      - internal
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================================================
  # 2. LOG SERVICE (Microservizio Node.js/Express per i Log)
  # ===========================================================================
  log-service:
    # IL PERCORSO QUI DEVE ESSERE CORRETTO:
    build:
      context: ./log-service
      dockerfile: Dockerfile
    container_name: log-service
    restart: unless-stopped
    # ... (altre configurazioni di logger-service)
    # ...
    networks:
      - internal

  # ===========================================================================
  # API GATEWAY (Express Gateway)
  # ===========================================================================
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: always
    depends_on:
      auth-service:
        condition: service_healthy
    environment:
      # Gateway Configuration
      NODE_ENV: production

      # JWT Secret (DEVE essere uguale nell'auth-service!)
      JWT_SECRET: ${JWT_SECRET}

      # Gateway Secret per comunicazione interna
      GATEWAY_SECRET: ${GATEWAY_SECRET}

      # CORS Origins (separati da virgola)
      CORS_ORIGINS: ${CORS_ORIGINS}

      # Rate Limiting Generale
      RATE_LIMIT_WINDOW: 15
      RATE_LIMIT_MAX_ATTEMPTS: 100
    ports:
      - '80:8080' # ✅ Espone porta 80 esterna → 8080 container
    networks:
      - internal # Accesso ai microservizi
      - external # Accesso pubblico
    healthcheck:
      test: ['CMD-SHELL', 'wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

volumes:
  mysql-data:
    driver: local
  mongo_data:
    driver: local
# =============================================================================
# NETWORK ARCHITECTURE
# =============================================================================
#
# ┌─────────────────────────────────────────────────────────────┐
# │                      EXTERNAL NETWORK                        │
# │  (accesso pubblico - solo API Gateway)                       │
# └────────────────────┬────────────────────────────────────────┘
#                      │
#                 ┌────▼────┐
#                 │ Gateway │ :80 → :8080
#                 │  (EG)   │
#                 └────┬────┘
#                      │
# ┌────────────────────┴─────────────────────────────────────────┐
# │                    INTERNAL NETWORK                          │
# │  (isolata - NO accesso esterno diretto)                      │
# │                                                               │
# │  ┌──────────────┐    ┌──────────────┐    ┌──────────────┐  │
# │  │ Auth Service │    │    MySQL     │    │    Future    │  │
# │  │    :3001     │    │    :3306     │    │   Services   │  │
# │  └──────────────┘    └──────────────┘    └──────────────┘  │
# └───────────────────────────────────────────────────────────────┘
#
# SICUREZZA:
# ✅ Microservizi NON esposti all'esterno (solo expose, no ports)
# ✅ Comunicazione interna via rete isolata
# ✅ Gateway verifica X-Gateway-Secret su ogni richiesta
# ✅ CORS gestito dal gateway
# ✅ Rate limiting generale gestito dal gateway
# ✅ JWT validazione centralizzata nel gateway
#
# =============================================================================
